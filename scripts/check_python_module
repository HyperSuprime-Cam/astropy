#!/usr/bin/env python
#
# Check if a compatible version of a python module is installed
#
# usage: check_python_module <module> <min_version>
#

from __future__ import print_function
import sys
import importlib
import argparse
import re

parser = argparse.ArgumentParser(description="Check presence and version of a Python module")
parser.add_argument("module", help="python module to check")
parser.add_argument("min_version", help="minimum version")
parser.add_argument("-v", "--verbose", action="store_true")
args = parser.parse_args()

modname = args.module
version = args.min_version

#
# See if numpy is installed in the first place
#
try:
    module = importlib.import_module(modname)
except ImportError:
    print("error: %(module)s is not installed."
          " Please install %(module)s v%(needver)s or later and try again." % {
              'module': modname,
              'needver': version
          },
          file=sys.stderr)
    exit(-1)


def split_version(verstring):
    """Split a version string into a list of version components.
    """
    vers = []
    for v in verstring.split("."):
        # only care about leading digits
        # Assumes that for the purposes of version checking 4.0rc1 == 4.0.0
        matchint = re.match(r"(\d+)", v)
        if matchint:
            vers.append(int(matchint.group(1)))
        else:
            raise ValueError(f"Version string ({verstring}) does not have numeric components")
    return vers


#
# Check version compatibility
#
needver = split_version(version)
havever = split_version(module.__version__)

# For comparison, ensure that we pad havever with 0s since if we
# have version 4.0 but need to compare with 3.0.0 we are really using 4.0.0
havever += [0]*(len(needver) - len(havever))

for a, b in zip(needver, havever):
    if a > b:
        print("error: %(module)s version too old (v%(havever)s)."
              " Please install %(module)s v%(needver)s or later and try again." % {
                  'module': modname,
                  'havever': module.__version__,
                  'needver': version
              },
              file=sys.stderr)
        exit(-1)
    elif a < b:
        break

if args.verbose:
    print("Using externally provided %s v%s." % (modname, module.__version__))

# OK.
exit(0)
